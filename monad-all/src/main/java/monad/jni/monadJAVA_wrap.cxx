/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "blizzard_hash.h"
#include "logger.h"
#include "monad_types.h"
#include "resource_manager.h"
#include "sync_server.h"
#include "sync_request.pb.h"

#include "node_id_nosql.h"
#include "node_nosql.h"
#include "nosql_support.h"
#include "sync_id_nosql.h"
#include "sync_nosql.h"
#include "sync_server.h"

SWIGINTERN StatusType monad_SyncNoSQL_Put2(monad::SyncNoSQL *self,leveldb::Slice const &key,leveldb::Slice const &value,long long const timestamp,leveldb::Slice const *id){
    return self->Put(key,value,timestamp,id);
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_SyncNoSQLManager_1AddInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  monad::ResourceManager< monad::SyncNoSQL > *arg1 = (monad::ResourceManager< monad::SyncNoSQL > *) 0 ;
  char *arg2 = (char *) 0 ;
  monad::SyncNoSQL *arg3 = (monad::SyncNoSQL *) 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(monad::ResourceManager< monad::SyncNoSQL > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(monad::SyncNoSQL **)&jarg3; 
  result = (StatusType)(arg1)->AddInstance((char const *)arg2,(monad::SyncNoSQL const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_SyncNoSQLManager_1RemoveInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  monad::ResourceManager< monad::SyncNoSQL > *arg1 = (monad::ResourceManager< monad::SyncNoSQL > *) 0 ;
  char *arg2 = (char *) 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::ResourceManager< monad::SyncNoSQL > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (StatusType)(arg1)->RemoveInstance((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_SyncNoSQLManager_1FindInstanceByHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  monad::ResourceManager< monad::SyncNoSQL > *arg1 = (monad::ResourceManager< monad::SyncNoSQL > *) 0 ;
  long long arg2 ;
  monad::SyncNoSQL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::ResourceManager< monad::SyncNoSQL > **)&jarg1; 
  arg2 = (long long)jarg2; 
  result = (monad::SyncNoSQL *)(arg1)->FindInstanceByHash(arg2);
  *(monad::SyncNoSQL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_SyncNoSQLManager_1FindInstanceByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  monad::ResourceManager< monad::SyncNoSQL > *arg1 = (monad::ResourceManager< monad::SyncNoSQL > *) 0 ;
  char *arg2 = (char *) 0 ;
  monad::SyncNoSQL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::ResourceManager< monad::SyncNoSQL > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (monad::SyncNoSQL *)(arg1)->FindInstanceByName((char const *)arg2);
  *(monad::SyncNoSQL **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_new_1SyncNoSQLManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  monad::ResourceManager< monad::SyncNoSQL > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (monad::ResourceManager< monad::SyncNoSQL > *)new monad::ResourceManager< monad::SyncNoSQL >();
  *(monad::ResourceManager< monad::SyncNoSQL > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_delete_1SyncNoSQLManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  monad::ResourceManager< monad::SyncNoSQL > *arg1 = (monad::ResourceManager< monad::SyncNoSQL > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(monad::ResourceManager< monad::SyncNoSQL > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_monad_jni_CMonadJNI_SYNC_1WORKERS_1ENDPOINT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("inproc://_sync_workers");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_monad_jni_CMonadJNI_DATA_1STAT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("_stat.count");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_monad_jni_CMonadJNI_DATA_1MAX_1TIMESTAMP_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("_stat.max.timestamp");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_MONAD_1NATIVE_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MONAD_NATIVE_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_BINLOG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataType)BINLOG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_KV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataType)KV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_REGION_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataType)REGION_INFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_REGION_1SEQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataType)REGION_SEQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_REGION_1ID_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataType)REGION_ID_INFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_REGION_1ID_1SEQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataType)REGION_ID_SEQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_ID_1SEQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataType)ID_SEQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_ID_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataType)ID_STRING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_LOG_1BIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  BinlogType result;
  
  (void)jenv;
  (void)jcls;
  result = (BinlogType)LOG_BIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_LOG_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  BinlogType result;
  
  (void)jenv;
  (void)jcls;
  result = (BinlogType)LOG_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_PUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataCommandType)PUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_DEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataCommandType)DEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_UPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataCommandType)UPDATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_COMMAND_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DataCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (DataCommandType)COMMAND_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_S_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusType)S_OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_E_1DATA_1SAVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusType)E_DATA_SAVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_E_1GET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusType)E_GET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_E_1DATA_1DELETE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusType)E_DATA_DELETE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_E_1ELEMENT_1NOT_1FOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusType)E_ELEMENT_NOT_FOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_E_1NO_1NODE_1SERVER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusType)E_NO_NODE_SERVER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_E_1DATA_1NOT_1FOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusType)E_DATA_NOT_FOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_E_1FAIL_1TO_1COMMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusType)E_FAIL_TO_COMMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_E_1INSTANCE_1IS_1NULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusType)E_INSTANCE_IS_NULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_E_1ID_1SERVER_1NOT_1SET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusType)E_ID_SERVER_NOT_SET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_NoSQLOptions_1cache_1size_1mb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NoSQLOptions *arg1 = (NoSQLOptions *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NoSQLOptions **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cache_size_mb = arg2;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_NoSQLOptions_1cache_1size_1mb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NoSQLOptions *arg1 = (NoSQLOptions *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NoSQLOptions **)&jarg1; 
  result = (unsigned int) ((arg1)->cache_size_mb);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_NoSQLOptions_1write_1buffer_1mb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NoSQLOptions *arg1 = (NoSQLOptions *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NoSQLOptions **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->write_buffer_mb = arg2;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_NoSQLOptions_1write_1buffer_1mb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NoSQLOptions *arg1 = (NoSQLOptions *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NoSQLOptions **)&jarg1; 
  result = (unsigned int) ((arg1)->write_buffer_mb);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_NoSQLOptions_1max_1open_1files_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NoSQLOptions *arg1 = (NoSQLOptions *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NoSQLOptions **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->max_open_files = arg2;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_NoSQLOptions_1max_1open_1files_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NoSQLOptions *arg1 = (NoSQLOptions *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NoSQLOptions **)&jarg1; 
  result = (unsigned int) ((arg1)->max_open_files);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_NoSQLOptions_1log_1keeped_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NoSQLOptions *arg1 = (NoSQLOptions *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NoSQLOptions **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->log_keeped_num = arg2;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_NoSQLOptions_1log_1keeped_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NoSQLOptions *arg1 = (NoSQLOptions *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NoSQLOptions **)&jarg1; 
  result = (unsigned int) ((arg1)->log_keeped_num);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_new_1NoSQLOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NoSQLOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NoSQLOptions *)new NoSQLOptions();
  *(NoSQLOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_delete_1NoSQLOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NoSQLOptions *arg1 = (NoSQLOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NoSQLOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_new_1NoSQLSupport(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  NoSQLOptions *arg2 = 0 ;
  monad::NoSQLSupport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(NoSQLOptions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NoSQLOptions const & reference is null");
    return 0;
  } 
  result = (monad::NoSQLSupport *)new monad::NoSQLSupport((char const *)arg1,(NoSQLOptions const &)*arg2);
  *(monad::NoSQLSupport **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_delete_1NoSQLSupport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  monad::NoSQLSupport *arg1 = (monad::NoSQLSupport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(monad::NoSQLSupport **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jbyteArray JNICALL Java_monad_jni_CMonadJNI_NoSQLSupport_1RawGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jbyteArray jresult = 0 ;
  monad::NoSQLSupport *arg1 = (monad::NoSQLSupport *) 0 ;
  leveldb::Slice *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NoSQLSupport **)&jarg1; 
  
  char* c_data_jarg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
  int len_jarg2 = (int)jenv->GetArrayLength(jarg2);
  
  leveldb::Slice arg2_slice(c_data_jarg2,len_jarg2);
  arg2 = &arg2_slice;
  
  result = (std::string *)(arg1)->RawGet((leveldb::Slice const &)*arg2);
  {
    if(! result){
      return NULL;
    }
    size_t sz = result->size();
    jresult = jenv->NewByteArray(sz);
    if(! jresult) {
      delete result;
      return NULL;
    }
    
    //set data
    jenv->SetByteArrayRegion(jresult, 0, sz, (jbyte*) result->data());
    delete result;
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte*)arg2->data(), JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_NoSQLSupport_1RawPut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jbyteArray jarg3) {
  jint jresult = 0 ;
  monad::NoSQLSupport *arg1 = (monad::NoSQLSupport *) 0 ;
  leveldb::Slice *arg2 = 0 ;
  leveldb::Slice *arg3 = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NoSQLSupport **)&jarg1; 
  
  char* c_data_jarg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
  int len_jarg2 = (int)jenv->GetArrayLength(jarg2);
  
  leveldb::Slice arg2_slice(c_data_jarg2,len_jarg2);
  arg2 = &arg2_slice;
  
  
  char* c_data_jarg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
  int len_jarg3 = (int)jenv->GetArrayLength(jarg3);
  
  leveldb::Slice arg3_slice(c_data_jarg3,len_jarg3);
  arg3 = &arg3_slice;
  
  result = (StatusType)(arg1)->RawPut((leveldb::Slice const &)*arg2,(leveldb::Slice const &)*arg3);
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte*)arg2->data(), JNI_ABORT);
  }
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte*)arg3->data(), JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_NoSQLSupport_1GetDataStatCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  monad::NoSQLSupport *arg1 = (monad::NoSQLSupport *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NoSQLSupport **)&jarg1; 
  result = (int)(arg1)->GetDataStatCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_new_1NodeIdNoSQL(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  NoSQLOptions *arg2 = 0 ;
  monad::NodeIdNoSQL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(NoSQLOptions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NoSQLOptions const & reference is null");
    return 0;
  } 
  result = (monad::NodeIdNoSQL *)new monad::NodeIdNoSQL((char const *)arg1,(NoSQLOptions const &)*arg2);
  *(monad::NodeIdNoSQL **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_monad_jni_CMonadJNI_NodeIdNoSQL_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyteArray jresult = 0 ;
  monad::NodeIdNoSQL *arg1 = (monad::NodeIdNoSQL *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeIdNoSQL **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::string *)(arg1)->GetId(arg2);
  {
    if(! result){
      return NULL;
    }
    size_t sz = result->size();
    jresult = jenv->NewByteArray(sz);
    if(! jresult) {
      delete result;
      return NULL;
    }
    
    //set data
    jenv->SetByteArrayRegion(jresult, 0, sz, (jbyte*) result->data());
    delete result;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_NodeIdNoSQL_1GetIdSeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jint jresult = 0 ;
  monad::NodeIdNoSQL *arg1 = (monad::NodeIdNoSQL *) 0 ;
  leveldb::Slice *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeIdNoSQL **)&jarg1; 
  
  char* c_data_jarg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
  int len_jarg2 = (int)jenv->GetArrayLength(jarg2);
  
  leveldb::Slice arg2_slice(c_data_jarg2,len_jarg2);
  arg2 = &arg2_slice;
  
  result = (int)(arg1)->GetIdSeq((leveldb::Slice const &)*arg2);
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte*)arg2->data(), JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_delete_1NodeIdNoSQL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  monad::NodeIdNoSQL *arg1 = (monad::NodeIdNoSQL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(monad::NodeIdNoSQL **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_new_1NodeNoSQL(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  NoSQLOptions *arg2 = 0 ;
  monad::NodeNoSQL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(NoSQLOptions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NoSQLOptions const & reference is null");
    return 0;
  } 
  result = (monad::NodeNoSQL *)new monad::NodeNoSQL((char const *)arg1,(NoSQLOptions const &)*arg2);
  *(monad::NodeNoSQL **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_delete_1NodeNoSQL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1SetIdNoSQL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  monad::NodeIdNoSQL *arg2 = (monad::NodeIdNoSQL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  arg2 = *(monad::NodeIdNoSQL **)&jarg2; 
  (arg1)->SetIdNoSQL(arg2);
}


SWIGEXPORT jbyteArray JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1Get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jbyteArray jresult = 0 ;
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  leveldb::Slice *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  
  char* c_data_jarg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
  int len_jarg2 = (int)jenv->GetArrayLength(jarg2);
  
  leveldb::Slice arg2_slice(c_data_jarg2,len_jarg2);
  arg2 = &arg2_slice;
  
  result = (std::string *)(arg1)->Get((leveldb::Slice const &)*arg2);
  {
    if(! result){
      return NULL;
    }
    size_t sz = result->size();
    jresult = jenv->NewByteArray(sz);
    if(! jresult) {
      delete result;
      return NULL;
    }
    
    //set data
    jenv->SetByteArrayRegion(jresult, 0, sz, (jbyte*) result->data());
    delete result;
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte*)arg2->data(), JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1FindNextBinlog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jbyteArray jresult = 0 ;
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  long long arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  arg2 = (long long)jarg2; 
  result = (std::string *)(arg1)->FindNextBinlog(arg2);
  {
    if(! result){
      return NULL;
    }
    size_t sz = result->size();
    jresult = jenv->NewByteArray(sz);
    if(! jresult) {
      delete result;
      return NULL;
    }
    
    //set data
    jenv->SetByteArrayRegion(jresult, 0, sz, (jbyte*) result->data());
    delete result;
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jbyteArray jresult = 0 ;
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  unsigned int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (std::string *)(arg1)->GetId(arg2);
  {
    if(! result){
      return NULL;
    }
    size_t sz = result->size();
    jresult = jenv->NewByteArray(sz);
    if(! jresult) {
      delete result;
      return NULL;
    }
    
    //set data
    jenv->SetByteArrayRegion(jresult, 0, sz, (jbyte*) result->data());
    delete result;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1Del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jint jresult = 0 ;
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  leveldb::Slice *arg2 = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  
  char* c_data_jarg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
  int len_jarg2 = (int)jenv->GetArrayLength(jarg2);
  
  leveldb::Slice arg2_slice(c_data_jarg2,len_jarg2);
  arg2 = &arg2_slice;
  
  result = (StatusType)(arg1)->Del((leveldb::Slice const &)*arg2);
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte*)arg2->data(), JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1GetLastLogSeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  result = (long long)(arg1)->GetLastLogSeq();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1DeleteBinlog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  arg2 = (long long)jarg2; 
  (arg1)->DeleteBinlog(arg2);
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1StartSyncData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jshort jarg4) {
  jint jresult = 0 ;
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned char arg4 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned char)jarg4; 
  result = (StatusType)(arg1)->StartSyncData((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1SyncDataWorker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jshort jarg4) {
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned char arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (unsigned char)jarg4; 
  (arg1)->SyncDataWorker((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1DoSyncData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned char arg4 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned char)jarg4; 
  result = (long long)(arg1)->DoSyncData((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1StopNoSQL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  monad::NodeNoSQL *arg1 = (monad::NodeNoSQL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::NodeNoSQL **)&jarg1; 
  (arg1)->StopNoSQL();
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_new_1SyncIdNoSQL(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  NoSQLOptions *arg2 = 0 ;
  monad::SyncIdNoSQL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(NoSQLOptions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NoSQLOptions const & reference is null");
    return 0;
  } 
  result = (monad::SyncIdNoSQL *)new monad::SyncIdNoSQL((char const *)arg1,(NoSQLOptions const &)*arg2);
  *(monad::SyncIdNoSQL **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_SyncIdNoSQL_1FindRegionMaxIdSeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jint jresult = 0 ;
  monad::SyncIdNoSQL *arg1 = (monad::SyncIdNoSQL *) 0 ;
  unsigned char arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncIdNoSQL **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (int)(arg1)->FindRegionMaxIdSeq(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_SyncIdNoSQL_1AddRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  monad::SyncIdNoSQL *arg1 = (monad::SyncIdNoSQL *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncIdNoSQL **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->AddRegion(arg2);
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_SyncIdNoSQL_1RemoveRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  monad::SyncIdNoSQL *arg1 = (monad::SyncIdNoSQL *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncIdNoSQL **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->RemoveRegion(arg2);
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_delete_1SyncIdNoSQL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  monad::SyncIdNoSQL *arg1 = (monad::SyncIdNoSQL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(monad::SyncIdNoSQL **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_new_1SyncNoSQL(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  NoSQLOptions *arg2 = 0 ;
  monad::SyncNoSQL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(NoSQLOptions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NoSQLOptions const & reference is null");
    return 0;
  } 
  result = (monad::SyncNoSQL *)new monad::SyncNoSQL((char const *)arg1,(NoSQLOptions const &)*arg2);
  *(monad::SyncNoSQL **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1SetSyncIdNoSQL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  monad::SyncIdNoSQL *arg2 = (monad::SyncIdNoSQL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  arg2 = *(monad::SyncIdNoSQL **)&jarg2; 
  (arg1)->SetSyncIdNoSQL(arg2);
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1FindRegionMaxDataSeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jint jresult = 0 ;
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  unsigned char arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (int)(arg1)->FindRegionMaxDataSeq(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1FindRegionMaxIdSeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jint jresult = 0 ;
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  unsigned char arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (int)(arg1)->FindRegionMaxIdSeq(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1FindRegionMaxTransSeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  unsigned char arg2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (long long)(arg1)->FindRegionMaxTransSeq(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1GetRegionDataInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  result = (std::string *)(arg1)->GetRegionDataInfo();
  {
    if(! result){
      return NULL;
    }
    size_t sz = result->size();
    jresult = jenv->NewByteArray(sz);
    if(! jresult) {
      delete result;
      return NULL;
    }
    
    //set data
    jenv->SetByteArrayRegion(jresult, 0, sz, (jbyte*) result->data());
    delete result;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1Del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jint jresult = 0 ;
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  leveldb::Slice *arg2 = 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  
  char* c_data_jarg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
  int len_jarg2 = (int)jenv->GetArrayLength(jarg2);
  
  leveldb::Slice arg2_slice(c_data_jarg2,len_jarg2);
  arg2 = &arg2_slice;
  
  result = (StatusType)(arg1)->Del((leveldb::Slice const &)*arg2);
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte*)arg2->data(), JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1UpdateDataTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  long long arg2 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  arg2 = (long long)jarg2; 
  result = (StatusType)(arg1)->UpdateDataTimestamp(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1AddRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3) {
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  unsigned char arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->AddRegion(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1RemoveRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->RemoveRegion(arg2);
}


SWIGEXPORT jbyteArray JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1FindNextBinlog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3) {
  jbyteArray jresult = 0 ;
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  unsigned char arg2 ;
  long long arg3 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (long long)jarg3; 
  result = (std::string *)(arg1)->FindNextBinlog(arg2,arg3);
  {
    if(! result){
      return NULL;
    }
    size_t sz = result->size();
    jresult = jenv->NewByteArray(sz);
    if(! jresult) {
      delete result;
      return NULL;
    }
    
    //set data
    jenv->SetByteArrayRegion(jresult, 0, sz, (jbyte*) result->data());
    delete result;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1DeleteRegionBinlog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3) {
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  unsigned char arg2 ;
  long long arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (long long)jarg3; 
  (arg1)->DeleteRegionBinlog(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1Put2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jbyteArray jarg3, jlong jarg4, jbyteArray jarg5) {
  jint jresult = 0 ;
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  leveldb::Slice *arg2 = 0 ;
  leveldb::Slice *arg3 = 0 ;
  long long arg4 ;
  leveldb::Slice *arg5 = (leveldb::Slice *) 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  
  char* c_data_jarg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
  int len_jarg2 = (int)jenv->GetArrayLength(jarg2);
  
  leveldb::Slice arg2_slice(c_data_jarg2,len_jarg2);
  arg2 = &arg2_slice;
  
  
  char* c_data_jarg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
  int len_jarg3 = (int)jenv->GetArrayLength(jarg3);
  
  leveldb::Slice arg3_slice(c_data_jarg3,len_jarg3);
  arg3 = &arg3_slice;
  
  arg4 = (long long)jarg4; 
  
  if(jarg5){
    char* c_data_jarg5 = (char *) jenv->GetByteArrayElements(jarg5, 0);
    int len_jarg5 = (int)jenv->GetArrayLength(jarg5);
    
    arg5 = new leveldb::Slice(c_data_jarg5,len_jarg5);
  }else{
    arg5 = NULL;
  }
  
  result = (StatusType)monad_SyncNoSQL_Put2(arg1,(leveldb::Slice const &)*arg2,(leveldb::Slice const &)*arg3,arg4,(leveldb::Slice const *)arg5);
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte*)arg2->data(), JNI_ABORT);
  }
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte*)arg3->data(), JNI_ABORT);
  }
  {
    if(arg5){
      jenv->ReleaseByteArrayElements(jarg5, (jbyte*)arg5->data(), JNI_ABORT);
      delete arg5;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_delete_1SyncNoSQL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  monad::SyncNoSQL *arg1 = (monad::SyncNoSQL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(monad::SyncNoSQL **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_new_1SyncServer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  monad::SyncServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (monad::SyncServer *)new monad::SyncServer();
  *(monad::SyncServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_SyncServer_1Start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  monad::SyncServer *arg1 = (monad::SyncServer *) 0 ;
  char *arg2 = (char *) 0 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncServer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (StatusType)(arg1)->Start((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_SyncServer_1StartWorkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  monad::SyncServer *arg1 = (monad::SyncServer *) 0 ;
  int arg2 ;
  StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncServer **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (StatusType)(arg1)->StartWorkers(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_SyncServer_1StopServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  monad::SyncServer *arg1 = (monad::SyncServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(monad::SyncServer **)&jarg1; 
  (arg1)->StopServer();
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_delete_1SyncServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  monad::SyncServer *arg1 = (monad::SyncServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(monad::SyncServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_LogOpen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jboolean jarg3, jlong jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool arg3 ;
  long long arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (long long)jarg4; 
  result = (int)monad::LogOpen((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_LogOpen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)monad::LogOpen((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_LogOpen_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (int)monad::LogOpen((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_monad_jni_CMonadJNI_LogOpen_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)monad::LogOpen((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_monad_jni_CMonadJNI_SetLogLevel(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  monad::SetLogLevel(arg1);
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_HashString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (long long)monad::HashString((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_NodeIdNoSQL_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(monad::NoSQLSupport **)&baseptr = *(monad::NodeIdNoSQL **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_NodeNoSQL_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(monad::NoSQLSupport **)&baseptr = *(monad::NodeNoSQL **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_SyncIdNoSQL_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(monad::NoSQLSupport **)&baseptr = *(monad::SyncIdNoSQL **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_SyncNoSQL_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(monad::NoSQLSupport **)&baseptr = *(monad::SyncNoSQL **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_monad_jni_CMonadJNI_SyncServer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(monad::ResourceManager< monad::SyncNoSQL > **)&baseptr = *(monad::SyncServer **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

