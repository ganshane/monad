#!/bin/bash  
#
# *nix系统下的启动脚本,(windows下用 cygwin也可以使用)
#
# 配置文件
#
# /etc/default/node
#   在启动的时候读取改配置文件,可以设置一些环境变量之类。
#
# $HOME/.noderc
#   在启动的时候读取改配置文件,可以设置一些环境变量之类。
#
# 可配置变量
#
# JAVA_HOME
#   java所在文件目录
#
#
# JAVA
#   java命令的位置，如果未设置，则使用 $JAVA_HOME/bin/java 进行执行
#
# JAVA_OPTIONS
#   java虚拟机的配置参数
#
# SERVER_HOME
#   服务器安装所在目录，如果未设置，脚本则自动寻找
#   
# SERVER_PORT
#   服务器监听的端口，供外来连接使用
#   
# SERVER_ARGS
#   服务器启动时候的运行，参数则直接传给java的main程序
#
# SERVER_USER
#   服务器运行用户，如果未设置，则使用当前用户
#

usage()
{
    echo "Usage: $0 {start|stop|run|restart|check|supervise} [ parameter ... ] "
    exit 1
}

[ $# -gt 0 ] || usage

##################################################
# 私有变量部分
##################################################
SERVER_FLAG="node"
SERVER_MESSAGE="Monad node Server"
SERVER_DAEMON_PID=monad.node.pid
SERVER_MAIN=monad.node.app.MonadNodeBootstrap

##################################################
# Some utility functions
##################################################
findDirectory()
{
  local L OP=$1
  shift
  for L in "$@"; do
    [ "$OP" "$L" ] || continue
    printf %s "$L"
    break
  done
}

running()
{
  if [ -f "$1" ]
  then
    local PID=$(cat "$1" 2>/dev/null) || return 1
    kill -0 "$PID" 2>/dev/null
    return
  fi
  rm -f "$1"
  return 1
}

started()
{
  # wait for 60s to see "STARTED" in state file
  for T in 1 2 3 4 5 6 7 9 10 11 12 13 14 15
  do
    sleep 4
    [ -z "$(grep STARTED $1 2>/dev/null)" ] || return 0
    [ -z "$(grep STOPPED $1 2>/dev/null)" ] || return 1
    [ -z "$(grep FAILED $1 2>/dev/null)" ] || return 1
    local PID=$(cat "$2" 2>/dev/null) || return 1
    kill -0 "$PID" 2>/dev/null || return 1
    echo -n ". "
  done

  return 1;
}

##################################################
# Get the action & configs
##################################################

ACTION=$1
shift
SERVER_ARGS="$*"
CONFIGS=""
NO_START=0
TMP=/tmp

##################################################
# 加载默认配置文件
##################################################
if [ -f /etc/default/$SERVER_FLAG ] ; then
  . /etc/default/$SERVER_FLAG
fi


##################################################
# 加载用户自定义配置
##################################################
if [ -f $HOME/.${SERVER_FLAG}rc ] ; then 
  . $HOME/.${SERVER_FLAG}rc
fi



##################################################
# 确认安装成功
##################################################
SERVER_INSTALL_TRACE_FILE="doc/README.txt"
TMPJ=$TMP/j$$

##################################################
# 解析SERVER_HOME
##################################################
if [ -z "$SERVER_HOME" ] 
then
    ## resolve links - $0 may be a link to server's home
    PRG="$0"
    # need this for relative symlinks
    while [ -h "$PRG" ] ; do
        ls=`ls -ld "$PRG"`
        link=`expr "$ls" : '.*-> \(.*\)$'`
        if expr "$link" : '/.*' > /dev/null; then
            PRG="$link"
        else
            PRG="`dirname "$PRG"`/$link"
        fi
    done

    SERVER_HOME_1=`dirname "$PRG"`/..

  if [ -f "${SERVER_HOME_1}/$SERVER_INSTALL_TRACE_FILE" ] ; 
  then 
     SERVER_HOME=${SERVER_HOME_1} 
  fi
fi

##################################################
# No SERVER_HOME yet? We're out of luck!
##################################################
if [ -z "$SERVER_HOME" ] ; then
    echo "** ERROR: SERVER_HOME 变量未设置，你需要手工设置，或者从标准安装启动"
    exit 1
fi

cd $SERVER_HOME
SERVER_HOME=`pwd`


#####################################################
# 检测是否正确
#####################################################
if [ ! -r $SERVER_HOME/$SERVER_INSTALL_TRACE_FILE ] 
then
   echo "** ERROR: Oops! $SERVER_FLAG doesn't appear to be installed in $SERVER_HOME"
   echo "** ERROR:  $SERVER_HOME/$SERVER_INSTALL_TRACE_FILE is not readable!"
   exit 1
fi


#####################################################
# Find a location for the pid file
#####################################################
if [  -z "$SERVER_RUN" ] 
then
    SERVER_RUN=${SERVER_HOME}/var
    # 服务器运行目录
    if [ ! -d "$SERVER_RUN" ]
    then
        mkdir -p $SERVER_RUN
    fi
fi

#####################################################
# Find a PID for the pid file
#####################################################
if [  -z "$SERVER_DAEMON_PID" ] 
then
   echo "** ERROR: Oops! unset SERVER_DAEMON_PID"
   exit 1
fi
SERVER_PID=$SERVER_RUN/$SERVER_DAEMON_PID
#####################################################
# Find a server main class
#####################################################
if [  -z "$SERVER_MAIN" ] 
then
   echo "** ERROR: Oops! unset SERVER_MAIN"
   exit 1
fi
#####################################################
# Find server message
#####################################################
if [  -z "$SERVER_MESSAGE" ] 
then
    SERVER_MESSAGE="app server"
fi



##################################################
# Check for JAVA_HOME
##################################################
if [ -z "$JAVA_HOME" ]
then
    # If a java runtime is not defined, search the following
    # directories for a JVM and sort by version. Use the highest
    # version number.

    # Java search path
    JAVA_LOCATIONS="\
        /usr/java \
        /usr/bin \
        /usr/local/bin \
        /usr/local/java \
        /usr/local/jdk \
        /usr/local/jre \
	/usr/lib/jvm \
        /opt/java \
        /opt/jdk \
        /opt/jre \
    " 
    JAVA_NAMES="java jdk jre"
    for N in $JAVA_NAMES ; do
        for L in $JAVA_LOCATIONS ; do
            [ -d $L ] || continue 
            find $L -name "$N" ! -type d | grep -v threads | while read J ; do
                [ -x $J ] || continue
                VERSION=`eval $J -version 2>&1`       
                [ $? = 0 ] || continue
                VERSION=`expr "$VERSION" : '.*"\(1.[0-9\.]*\)["_]'`
                [ "$VERSION" = "" ] && continue
                expr $VERSION \< 1.2 >/dev/null && continue
                echo $VERSION:$J
            done
        done
    done | sort | tail -1 > $TMPJ
    JAVA=`cat $TMPJ | cut -d: -f2`
    JVERSION=`cat $TMPJ | cut -d: -f1`

    JAVA_HOME=`dirname $JAVA`
    while [ ! -z "$JAVA_HOME" -a "$JAVA_HOME" != "/" -a ! -f "$JAVA_HOME/lib/tools.jar" ] ; do
        JAVA_HOME=`dirname $JAVA_HOME`
    done
    [ "$JAVA_HOME" = "" ] && JAVA_HOME=

    echo "Found JAVA=$JAVA in JAVA_HOME=$JAVA_HOME"
fi


##################################################
# Determine which JVM of version >1.2
# Try to use JAVA_HOME
##################################################
if [ "$JAVA" = "" -a "$JAVA_HOME" != "" ]
then
  if [ ! -z "$JAVACMD" ] 
  then
     JAVA="$JAVACMD" 
  else
    [ -x $JAVA_HOME/bin/jre -a ! -d $JAVA_HOME/bin/jre ] && JAVA=$JAVA_HOME/bin/jre
    [ -x $JAVA_HOME/bin/java -a ! -d $JAVA_HOME/bin/java ] && JAVA=$JAVA_HOME/bin/java
  fi
fi

if [ "$JAVA" = "" ]
then
    echo "Cannot find a JRE or JDK. Please set JAVA_HOME to a >=1.2 JRE" 2>&2
    exit 1
fi

JAVA_VERSION=`expr "$($JAVA -version 2>&1 | head -1)" : '.*1\.\([0-9]\)'`

#####################################################
# See if server env  is defined
#####################################################
if [ "$SERVER_PORT" = "" ]
then
  SERVER_PORT="9080"
fi

JAVA_OPTIONS="$JAVA_OPTIONS $SERVER_JAVA_OPTIONS  \
    -Dserver.port=$SERVER_PORT \
    -Dserver.home=$SERVER_HOME \
    -Dfile.encoding=utf-8 "
#####################################################
# Are we running on Windows? Could be, with Cygwin/NT.
#####################################################
case "`uname`" in
CYGWIN*) PATH_SEPARATOR=";";;
*) PATH_SEPARATOR=":";;
esac


#####################################################
# Add properties to Java VM options.
#####################################################
#创建java使用的临时文件夹
if [ ! -d "$SERVER_HOME/var/tmp" ]
then
    mkdir -p $SERVER_HOME/var/tmp
fi
JAVA_OPTIONS="$JAVA_OPTIONS -Djava.net.preferIPv4Stack=true -Djava.io.tmpdir=$SERVER_HOME/var/tmp"


#####################################################
# 寻找jar类库
#####################################################
HOME_LIB=$SERVER_HOME/lib
for jar in `ls $HOME_LIB/monad*.jar`
do
    SERVER_CP="$SERVER_CP:""$jar"
done


RUN_ARGS="$JAVA_OPTIONS -cp $SERVER_CP $SERVER_MAIN $SERVER_ARGS "
RUN_CMD="$JAVA $RUN_ARGS > ${SERVER_HOME}/out.log 2>&1"

#####################################################
# Comment these out after you're happy with what 
# the script is doing.
#####################################################
echo "SERVER_HOME = $SERVER_HOME"
#echo "SERVER_RUN        =  $SERVER_RUN"
#echo "SERVER_ARGS        =  $SERVER_ARGS"
echo "JAVA       = $JAVA"
#echo "SERVER_PID         =  $SERVER_PID"
#echo "SERVER_LOG_DIR     =  $SERVER_LOG_DIR"
#echo "SERVER_CONFIG_DIR  =  $SERVER_CONFIG_DIR"
#echo "JAVA_OPTIONS      =  $JAVA_OPTIONS"


##################################################
# Do the action
##################################################
case "$ACTION" in
  start)
      echo -n "Starting $SERVER_MESSAGE .......... "

      if [ "$NO_START" = "1" ]; then 
          echo "Not starting $SERVER_FLAG - NO_START=1 in /etc/default/$SERVER_FLAG";
          exit 0;
      fi


      if type start-stop-daemon > /dev/null 2>&1 
      then
          [ x$SERVER_USER = x ] && SERVER_USER=$(whoami)
          [ $UID = 0 ] && CH_USER="-c $SERVER_USER"
          if start-stop-daemon -S -p$SERVER_PID $CH_USER -d $SERVER_HOME -b -m \
                    -a /bin/bash  -- -c "exec $JAVA $RUN_ARGS  > ${SERVER_HOME}/out.log 2>&1"
          then
              sleep 1
              if running $SERVER_PID
              then
                  echo OK
              else
                  echo FAILED
              fi
          fi

      else

          if running $SERVER_PID
          then
              echo "Already Running!!"
              exit 1
          fi

          if [ x$SERVER_USER != x ] 
          then
              touch $SERVER_PID
              chown $SERVER_USER $SERVER_PID
              su - $SERVER_USER -c "
              $RUN_CMD &
              PID=\$!
              disown \$PID
              echo \$PID > $SERVER_PID"
          else
              $RUN_CMD &
              PID=$!
              disown $PID
              echo $PID > $SERVER_PID
          fi

          echo "STARTED $SERVER_FLAG `date`"
      fi

      ;;

  stop)
      echo -n "Stopping $SERVER_MESSAGE ........ "
      if type start-stop-daemon > /dev/null 2>&1; then
          start-stop-daemon -K -p $SERVER_PID -d $SERVER_HOME -a $JAVA -s HUP 
          sleep 1
          if running $SERVER_PID
          then
            sleep 3
            if running $SERVER_PID
            then
              sleep 10
              if running $SERVER_PID
              then
                sleep 30
                if running $SERVER_PID
                then
                  start-stop-daemon -K -p $SERVER_PID -d $SERVER_HOME -a $JAVA -s KILL
                fi
              fi
            fi
          fi

          rm -f $SERVER_PID
          echo OK
      else
          PID=`cat $SERVER_PID 2>/dev/null`
          TIMEOUT=30
          while running $SERVER_PID && [ $TIMEOUT -gt 0 ]
          do
              kill $PID 2>/dev/null
              sleep 1
              let TIMEOUT=$TIMEOUT-1
          done

          [ $TIMEOUT -gt 0 ] || kill -9 $PID 2>/dev/null

          rm -f $SERVER_PID
          echo OK
      fi
      ;;

  restart)
        SERVER_SH=$0
        echo $SERVER_SH
        $SERVER_SH stop $*
        sleep 5
        $SERVER_SH start $*
        ;;

  supervise)
       #
       # Under control of daemontools supervise monitor which
       # handles restarts and shutdowns via the svc program.
       #
         exec $RUN_CMD
         ;;

  run|demo)
        echo "Running $SERVER_MESSAGE: "

        if [ -f $SERVER_PID ]
        then
            echo "Already Running!!"
            exit 1
        fi

        exec $RUN_CMD
        ;;

  check)
        echo "Checking arguments to $SERVER_MESSAGE: "
        echo "SERVER_HOME        =  $SERVER_HOME"
        echo "SERVER_RUN         =  $SERVER_RUN"
        echo "SERVER_PID         =  $SERVER_PID"
        echo "SERVER_LOG_DIR     =  $SERVER_LOG_DIR"
        echo "SERVER_CONFIG_DIR  =  $SERVER_CONFIG_DIR"
        echo "JAVA_OPTIONS      =  $JAVA_OPTIONS"
        echo "JAVA              =  $JAVA"
        echo "CLASSPATH         =  $CLASSPATH"
        echo "RUN_CMD           =  $RUN_CMD"
        echo
        
        if [ -f $SERVER_PID ]
        then
            echo "$SERVER_FLAG running pid="`cat $SERVER_PID`
            exit 0
        fi
        exit 1
        ;;

*)
        usage
	;;
esac

exit 0


