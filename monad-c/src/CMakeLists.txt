IF(MONAD_HAVE_LINUX)
  SET(CMAKE_CXX_FLAGS "-fPIC -fno-omit-frame-pointer -Wall -Wextra -fno-strict-aliasing ${CMAKE_CXX_FLAGS}")
ENDIF()
IF(NIRVANA_HAVE_WINDOWS)
  SET(CMAKE_SHARED_LINKER_FLAGS "-static-libgcc -static-libstdc++ -Wl,--kill-at")
ENDIF()


FILE(GLOB_RECURSE ROOT_SOURCES ${PROJECT_SOURCE_DIR}/src/*)
ADD_LIBRARY(monad STATIC ${ROOT_SOURCES})

IF(NIRVANA_HAVE_ROCKSDB)
  TARGET_LINK_LIBRARIES(monad pthread rocksdb snappy)
ELSE()
  TARGET_LINK_LIBRARIES(monad pthread leveldb snappy)
ENDIF()


##################### JNI BRIDGE ##############
# swig support
FIND_PACKAGE(SWIG REQUIRED)
INCLUDE(${SWIG_USE_FILE})
INCLUDE(UseSWIG)

# java jni support
FIND_PACKAGE(Java REQUIRED)
FIND_PACKAGE(JNI REQUIRED)
INCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH})
INCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH2})

# create swig ouput directory
SET(CMAKE_SWIG_OUTDIR javaapi)
ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_SWIG_OUTDIR}
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_SWIG_OUTDIR}
    COMMAND ${CMAKE_COMMAND} -E make_directory javaapi
    COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/src
    COMMENT "Creating target directory for nirvana project JNI sources")
ADD_CUSTOM_TARGET(jni-swig-out-dir ALL DEPENDS ${CMAKE_SWIG_OUTDIR})

SET(SWIG_I monad.i)
SET_SOURCE_FILES_PROPERTIES(${SWIG_I} PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(${SWIG_I} PROPERTIES SWIG_FLAGS "-package;monad.jni.services.gen")
SET(SWIG_SOURCES ${SWIG_I})
MESSAGE(STATUS "SWIG SOURCES for ${SWIG_SOURCES}")
SWIG_ADD_MODULE(monad4j JAVA ${SWIG_SOURCES})
SWIG_LINK_LIBRARIES(monad4j monad)
SET_TARGET_PROPERTIES(monad4j PROPERTIES LINKER_LANGUAGE CXX)
ADD_DEPENDENCIES(monad4j monad jni-swig-out-dir)

